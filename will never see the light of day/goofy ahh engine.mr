// this sample engine is defaulted to be an inline engine with no vtec
// and is therefore set with arbitrary values that should be changed

import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()
label cycle(2 * 360 * units.deg)

label rev(9000) // rev limit

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();

}

private node cylinder_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 50 * units.cc;

    input intake_runner_volume: 50 * units.cc;
    input intake_runner_cross_section_area: 30 * units.mm * 30 * units.mm;
    // http://www.wallaceracing.com/runnertorquecalc.php
    // get stroke + bore first before calculating for peak torque output

    input exhaust_runner_volume: 125 * units.cc;
    input exhaust_runner_cross_section_area: 25 * units.mm * 25 * units.mm;
    // keep this more or less the same as intake runner csa, and then experiment with it

    input flow_attenuation: 1.0;
    input lift_scale: 1.0;
    input flip_display: false;
    alias output __out: head;

    function intake_flow(50 * units.thou) // 1 thou = .0001 in
    intake_flow
        .add_flow_sample(0   * lift_scale, 0   * flow_attenuation)
        .add_flow_sample(50  * lift_scale, 50  * flow_attenuation)
        .add_flow_sample(100 * lift_scale, 80  * flow_attenuation)
        .add_flow_sample(150 * lift_scale, 125 * flow_attenuation)
        .add_flow_sample(200 * lift_scale, 160 * flow_attenuation)
        .add_flow_sample(250 * lift_scale, 190 * flow_attenuation)
        .add_flow_sample(300 * lift_scale, 210 * flow_attenuation)
        .add_flow_sample(350 * lift_scale, 225 * flow_attenuation)
        .add_flow_sample(400 * lift_scale, 230 * flow_attenuation)
        .add_flow_sample(450 * lift_scale, 250 * flow_attenuation)

    function exhaust_flow(50 * units.thou)
    exhaust_flow
        .add_flow_sample(0 *   lift_scale, 0   * flow_attenuation)
        .add_flow_sample(50 *  lift_scale, 50  * flow_attenuation)
        .add_flow_sample(100 * lift_scale, 80  * flow_attenuation)
        .add_flow_sample(150 * lift_scale, 110 * flow_attenuation)
        .add_flow_sample(200 * lift_scale, 130 * flow_attenuation)
        .add_flow_sample(250 * lift_scale, 150 * flow_attenuation)
        .add_flow_sample(300 * lift_scale, 160 * flow_attenuation)
        .add_flow_sample(350 * lift_scale, 170 * flow_attenuation)
        .add_flow_sample(400 * lift_scale, 170 * flow_attenuation)
        .add_flow_sample(450 * lift_scale, 170 * flow_attenuation)

    // at the moment, I do not know how to adjust intake and exhaust flows
    // copy these from other engines

    generic_cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: intake_runner_volume,
        intake_runner_cross_section_area: intake_runner_cross_section_area,
        exhaust_runner_volume: exhaust_runner_volume,
        exhaust_runner_cross_section_area: exhaust_runner_cross_section_area,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,

        valvetrain: standard_valvetrain(
            intake_camshaft: intake_camshaft,
            exhaust_camshaft: exhaust_camshaft
        ),
        flip_display: flip_display
    )
}


private node generic_camshaft {
    input lobe_profile;
    input intake_lobe_profile: lobe_profile;
    input exhaust_lobe_profile: lobe_profile;
    input lobe_separation: 116 * units.deg;
    // lower = more overlap between intake/exhaust valves opening
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: lobe_separation;

    input advance: 0 * units.deg;
    // https://help.summitracing.com/knowledgebase/article/SR-04706/en-us
    input base_radius: 1.0 * units.inch;

    output intake_cam_1: _intake_cam_1;
    output exhaust_cam_1: _exhaust_cam_1;
    output intake_cam_2: _intake_cam_2;
    output exhaust_cam_2: _exhaust_cam_2;


    camshaft_parameters params (
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_1(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_1(params, lobe_profile: exhaust_lobe_profile)
    camshaft _intake_cam_2(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_2(params, lobe_profile: exhaust_lobe_profile)

    label rot180(180 * units.deg)
    label rot360(360 * units.deg)

    // valves
    // early = subtract
    // late  = add

    label cyl1(0)
    label cyl2(360)

    _exhaust_cam_1
        .add_lobe(rot360 - exhaust_lobe_center - cyl1 * units.deg)

    _intake_cam_1
        .add_lobe(rot360 + intake_lobe_center - cyl1 * units.deg)

    _exhaust_cam_2
        .add_lobe(rot360 - exhaust_lobe_center - cyl2 * units.deg)

    _intake_cam_2
        .add_lobe(rot360 + intake_lobe_center - cyl2 * units.deg)

}

public node one_cylinder_engine {
    alias output __out: engine;

    engine engine(
        name: "test v2",
        starter_torque: 100 * units.lb_ft,
        starter_speed:  500 * units.rpm,
        redline: rev * units.rpm,
        // fuel: fuel(
        //     max_turbulence_effect: 2,
        //     max_burning_efficiency: 0.75
        // ),
        throttle_gamma: 2.0,
        hf_gain: 0.002,
        noise: 0.253,
        jitter: 0.195,
        simulation_frequency: 55000
        // i have no clue how to properly modify the above values starting from "fuel: " 
    )

    wires wires()

    label stroke(95 * units.mm)
    label bore(90 * units.mm)
    label rod_length(125 * units.mm)
    label rod_mass(150 * units.g)
    label piston_mass(300 * units.g)
    label compression_height(1 * units.inch)
    label crank_mass(5 * units.kg)
    label flywheel_mass(5 * units.kg)
    label flywheel_radius(5 * units.inch)

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 1 * units.kg, radius: 1.0 * units.cm)
    )

    label v_angle(90 * units.deg)
    // 90 degrees or below = v-engine
    // 180 degrees = flat engine

    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 1.0 * units.lb_ft,
        moment_of_inertia:
            crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 90 * units.deg + (v_angle / 2.0) // the v-angle divided by 2 signifies a v-engine
    )

    rod_journal rj0(angle: 0 * units.deg)

    c0
        .add_rod_journal(rj0)


    piston_parameters piston_params(
        mass: (100) * units.g, // 414 - piston mass, 152 - pin weight
        compression_height: compression_height,
        wrist_pin_position: 0.0,
        displacement: 0.0
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    intake intake(
        plenum_volume: 1200 * units.cc,
        plenum_cross_section_area: 12 * units.cm2,
        intake_flow_rate: k_carb(600),
        runner_flow_rate: k_carb(600),
        idle_flow_rate: k_carb(0.004),
        idle_throttle_plate_position: 0.9988,
        throttle_gamma: 1.0,
        velocity_decay: 1.0
    )

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(150),
        primary_tube_length: 10.0 * units.inch,
        primary_flow_rate: k_carb(150),
        velocity_decay: 0.75,
        volume: 250 * units.cc
    // if the engine sounds like it has a lot of distortion, 
    // lower the outlet and primary flow rate
    )

    exhaust_system exhaust0(
        es_params,
        audio_volume: 1.0,
        length: 12 * units.inch,
        impulse_response: ir_lib.sharp_0
    )

    exhaust_system exhaust1(
        es_params,
        audio_volume: 1.0,
        length: 12 * units.inch,
        impulse_response: ir_lib.sharp_0
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: stroke / 2 + rod_length + compression_height
    )

    cylinder_bank b0(bank_params, angle: v_angle / 2.0)
    cylinder_bank b1(bank_params, angle: -v_angle / 2.0)


    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.001)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire1,
            sound_attenuation: 1.0
            // adjust above per cylinder value to have diff engine sound
        )

    .set_cylinder_head(
            cylinder_head(
                intake_camshaft: camshaft.intake_cam_1,
                exhaust_camshaft: camshaft.exhaust_cam_1,
                flip_display: true,
                flow_attenuation: 1.5)
        )

    b1          
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.001)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire2,
            sound_attenuation: 1.0
            // adjust above per cylinder value to have diff engine sound
        )

        .set_cylinder_head(
            cylinder_head(
                intake_camshaft: camshaft.intake_cam_2,
                exhaust_camshaft: camshaft.exhaust_cam_2,
                flow_attenuation: 1.5)
        )

    engine
        .add_cylinder_bank(b0)
        .add_cylinder_bank(b1)

    engine.add_crankshaft(c0)

    harmonic_cam_lobe intake_lobe(
        duration_at_50_thou: 210 * units.deg,
        gamma: 1.0,
        lift: 6.9 * units.mm,
        steps: 100
    )

    harmonic_cam_lobe exhaust_lobe(
        duration_at_50_thou: 190 * units.deg,
        gamma: 1.0,
        lift: 6.5 * units.mm,
        steps: 100
    )

    generic_camshaft camshaft(
        lobe_profile: "N/A",

        intake_lobe_profile: intake_lobe,
        exhaust_lobe_profile: exhaust_lobe,

        intake_lobe_center:  116 * units.deg,
        exhaust_lobe_center: 116 * units.deg,

        base_radius: 1.0 * units.inch
    )

    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 25 * units.deg)
        .add_sample(1000 * units.rpm, 25 * units.deg)
        .add_sample(2000 * units.rpm, 30 * units.deg)
        .add_sample(3000 * units.rpm, 30 * units.deg)
        .add_sample(4000 * units.rpm, 30 * units.deg)

    // timing curve doesnt affect timing

    ignition_module ignition_module(
        timing_curve: timing_curve,
        rev_limit: rev * units.rpm,
        limiter_duration: 0.07)
    
    ignition_module
           .connect_wire(wires.wire1, 0 * 0 * units.deg)
           .connect_wire(wires.wire2, 360   * units.deg)
           // ...

    engine.add_ignition_module(ignition_module)
}

private node integra_type_r {
    alias output __out:
        vehicle(
            mass: 2400 * units.lb,
            drag_coefficient: 0.2,
            cross_sectional_area: (66 * units.inch) * (50 * units.inch),
            diff_ratio: 3.55,
            tire_radius: 10 * units.inch,
            rolling_resistance: 300 * units.N
        );
}

private node custom_transmission_type_3 {
    alias output __out:
        transmission(
            max_clutch_torque: 200 * units.lb_ft
        )
        .add_gear(3.000)
        .add_gear(2.000)
        .add_gear(1.500)
        .add_gear(1.200)
        .add_gear(0.900)
        .add_gear(0.700);
}

public node main {
    run(
        engine: one_cylinder_engine(),
        transmission: custom_transmission_type_3(),
        vehicle: integra_type_r()
    )
}

main()