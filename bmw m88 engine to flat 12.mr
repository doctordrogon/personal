// original base build bmw m88 by _dan
// modifications, tune and adjustment by me :)

// spark timing for bank 1 is a lil off

import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()
label rev(9000)
label rot30(60 * units.deg)
label rot60(60 * units.deg)
label rot90(90 * units.deg)
label rot120(120 * units.deg)
label rot180(180 * units.deg)
label rot360(360 * units.deg)

label cycle(2 * 360 * units.deg)

public node bmw_m88_distributor {
    input wires;
    input timing_curve;
    input rev_limit: rev * units.rpm;
    input limiter_duration: 0.06;
    alias output __out:
        ignition_module(timing_curve: timing_curve, rev_limit: rev_limit, limiter_duration: limiter_duration)
            // typical I6 firing order, 1-5-3-6-2-4; 
            // therefore by extension a flat 12 would be 1-7-5-11-3-9-6-12-2-8-4-10

            // .connect_wire(wires.wire1, 0.0 * rot60)
            // .connect_wire(wires.wire7, 1.0 * rot60 - rot180)
            // .connect_wire(wires.wire5, 2.0 * rot60)
            // .connect_wire(wires.wire11,3.0 * rot60 + rot180)
            // .connect_wire(wires.wire3, 4.0 * rot60)
            // .connect_wire(wires.wire9, 5.0 * rot60 - cycle + rot180)
            // .connect_wire(wires.wire6, 6.0 * rot60)
            // .connect_wire(wires.wire12, 7.0 * rot60 + rot180)
            // .connect_wire(wires.wire2,  8.0 * rot60)
            // .connect_wire(wires.wire8,  9.0 * rot60 + rot180)
            // .connect_wire(wires.wire4,  10.0 * rot60)
            // .connect_wire(wires.wire10, 11.0 * rot60 + rot180);
            .connect_wire(wires.wire1, 0 * rot120)
            .connect_wire(wires.wire2, 4 * rot120)
            .connect_wire(wires.wire3, 2 * rot120)
            .connect_wire(wires.wire4, 5 * rot120)
            .connect_wire(wires.wire5, 1 * rot120)
            .connect_wire(wires.wire6, 3 * rot120)

            .connect_wire(wires.wire7, (0 * rot120) + rot180)
            .connect_wire(wires.wire8, (4 * rot120) + rot180)
            .connect_wire(wires.wire9, (2 * rot120) + rot180)
            .connect_wire(wires.wire10,(5 * rot120) + rot180)
            .connect_wire(wires.wire11,(1 * rot120) + rot180)
            .connect_wire(wires.wire12,(3 * rot120) + rot180); 

}

private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
    output wire7: ignition_wire();
    output wire8: ignition_wire();
    output wire9: ignition_wire();
    output wire10: ignition_wire();
    output wire11: ignition_wire();
    output wire12: ignition_wire();
}

public node bmw_m88_lobe_profile_int { // custom adjusted cam lobes, these are the detuned ones that reduce peak power.
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 248 * units.deg,
            gamma: 2.0,
            lift: 8.9 * units.mm,
            steps: 100
        );
}

public node bmw_m88_lobe_profile_exh { // if you want to unrestrict the camshafts back to peak power the intake valve lift should go up to 8.9mm and exhaust valve lift to 8.2mm.
    alias output __out:
        harmonic_cam_lobe(
            duration_at_50_thou: 240 * units.deg,
            gamma: 2.0,
            lift: 8.2 * units.mm,
            steps: 100
        );
}

public node bmw_camshaft_builder {
    input in_lobe_profile: bmw_m88_lobe_profile_int();
    input ex_lobe_profile: bmw_m88_lobe_profile_exh();
    input intake_lobe_profile: in_lobe_profile;
    input exhaust_lobe_profile: ex_lobe_profile;
    input intake_lobe_center: 115.0 * units.deg;
    input exhaust_lobe_center: 120.0 * units.deg;
    input advance: 0.0 * units.deg;
    input base_radius: 16.5 * units.mm;

    output intake_cam_0:  _intake_cam_0;
    output exhaust_cam_0: _exhaust_cam_0;
    output intake_cam_1:  _intake_cam_1;
    output exhaust_cam_1: _exhaust_cam_1;

    camshaft_parameters params(
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)
    camshaft _intake_cam_1(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_1(params, lobe_profile: exhaust_lobe_profile)

    _intake_cam_0
        .add_lobe(rot360 + intake_lobe_center)              
        .add_lobe(rot360 + intake_lobe_center + 4 * rot120) 
        .add_lobe(rot360 + intake_lobe_center + 2 * rot120) 
        .add_lobe(rot360 + intake_lobe_center + 5 * rot120) 
        .add_lobe(rot360 + intake_lobe_center + 1 * rot120) 
        .add_lobe(rot360 + intake_lobe_center + 3 * rot120) 

    _exhaust_cam_0
        .add_lobe(rot360 - exhaust_lobe_center)                     
        .add_lobe(rot360 - exhaust_lobe_center + 4 * rot120)
        .add_lobe(rot360 - exhaust_lobe_center + 2 * rot120)
        .add_lobe(rot360 - exhaust_lobe_center + 5 * rot120)
        .add_lobe(rot360 - exhaust_lobe_center + 1 * rot120)
        .add_lobe(rot360 - exhaust_lobe_center + 3 * rot120)

    _intake_cam_1
        .add_lobe((rot360 + intake_lobe_center + 0 * rot120) + rot180)
        .add_lobe((rot360 + intake_lobe_center + 4 * rot120) + rot180)
        .add_lobe((rot360 + intake_lobe_center + 2 * rot120) + rot180)
        .add_lobe((rot360 + intake_lobe_center + 5 * rot120) + rot180)
        .add_lobe((rot360 + intake_lobe_center + 1 * rot120) + rot180)
        .add_lobe((rot360 + intake_lobe_center + 3 * rot120) + rot180)

    _exhaust_cam_1
        .add_lobe((rot360 - exhaust_lobe_center + 0 * rot120) + rot180)
        .add_lobe((rot360 - exhaust_lobe_center + 4 * rot120) + rot180)
        .add_lobe((rot360 - exhaust_lobe_center + 2 * rot120) + rot180)
        .add_lobe((rot360 - exhaust_lobe_center + 5 * rot120) + rot180)
        .add_lobe((rot360 - exhaust_lobe_center + 1 * rot120) + rot180)
        .add_lobe((rot360 - exhaust_lobe_center + 3 * rot120) + rot180)
}

private node add_flow_sample {
    input lift;
    input flow;
    input this;
    alias output __out: this;

    this.add_sample(lift * units.mm, k_28inH2O(flow))
}

public node bmw_m88_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 39.8 * units.cc;
    input flip_display: false;
    
    input flow_attenuation: 1.0;
    input lift_scale: 1.0;
    alias output __out: head;

    function intake_flow(1 * units.mm)
    intake_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 60 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 90 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 120 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 150 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 180 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 205 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 230 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 255 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 280 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 305 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 320 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 335 * flow_attenuation)

    function exhaust_flow(1 * units.mm)
    exhaust_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(1 * lift_scale, 55 * flow_attenuation)
        .add_flow_sample(2 * lift_scale, 80 * flow_attenuation)
        .add_flow_sample(3 * lift_scale, 105 * flow_attenuation)
        .add_flow_sample(4 * lift_scale, 125 * flow_attenuation)
        .add_flow_sample(5 * lift_scale, 142 * flow_attenuation)
        .add_flow_sample(6 * lift_scale, 160 * flow_attenuation)
        .add_flow_sample(7 * lift_scale, 180 * flow_attenuation)
        .add_flow_sample(8 * lift_scale, 200 * flow_attenuation)
        .add_flow_sample(9 * lift_scale, 220 * flow_attenuation)
        .add_flow_sample(10 * lift_scale, 240 * flow_attenuation)
        .add_flow_sample(11 * lift_scale, 260 * flow_attenuation)
        .add_flow_sample(12 * lift_scale, 280 * flow_attenuation)

        
    cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: circle_area(1.1 * units.inch) * 3 * units.inch,
        intake_runner_cross_section_area: circle_area(1.1 * units.inch),
        exhaust_runner_volume: circle_area(0.6 * units.inch) * 3 * units.inch,
        exhaust_runner_cross_section_area: circle_area(0.6 * units.inch),

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        intake_camshaft: intake_camshaft,
        exhaust_camshaft: exhaust_camshaft,
        flip_display: flip_display
    )
}

public node bmw_m88_itb { // This engine, even detuned, is far over spec (Making nearly 100hp and 150lb-ft more than necessary), so I reduced the ITB sizes to make it more manageable and realistic.
    input throttlebody_cfm: 500;
    input idle_flow_rate_cfm: 0.0001;
    input idle_throttle_plate_position: 0.9995;
    input throttle_gamma: 8.2;

    alias output __out: intake;

    intake intake(
        plenum_volume: (circle_area(1.5 * units.inch) * 9 * units.inch) / 4,
        plenum_cross_section_area: circle_area(1.5 * units.inch),
        intake_flow_rate: k_carb(throttlebody_cfm),
        idle_flow_rate: k_carb(idle_flow_rate_cfm),
        idle_throttle_plate_position: idle_throttle_plate_position,
        throttle_gamma: throttle_gamma,
        runner_flow_rate: k_carb(300.0),
        runner_length: 4.5 * units.inch,
        velocity_decay: 0.1
    )
}

public node bmw_m88_engine {
    alias output __out: engine;

    engine engine(
        name: "BMW M1 M88/1 rev. f12",
        starter_torque: 250 * units.lb_ft,
        starter_speed: 1200 * units.rpm,
        redline: rev * units.rpm,
        fuel: fuel(max_burning_efficiency: 1.30),
        throttle_gamma: 1.0,
        simulation_frequency: 7000, // itbs significantly reduce frames
        convolution: 1.000,
        hf_gain: 0.02,
        noise: 1.000,
        jitter: 1.000
    )
    
    label lean_angle(0 * units.deg) // changed to -10 to 0 since flat engine

    label bore(90 * units.mm) // bore and stroke specs from https://www.ultimatecarpage.com/spec/422/Porsche-917-30.html
    label bore_spacing(98.5 * units.mm) // ??
    label stroke(70.4 * units.mm)
    label rod_length(142 * units.mm)
    label rod_mass(100 * units.g)
    label piston_mass(100 * units.g)
    label compression_height(32.00 * units.mm)
    label deck_height(217.3 * units.mm)
    label piston_dome(0.3 * units.cc)
    label crank_mass(25 * units.lb)
    label flywheel_mass(5 * units.kg)
    label flywheel_radius(7 * units.inch)

    label crank_moment(
        disk_moment_of_inertia(mass: crank_mass, radius: stroke / 2)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment(
        disk_moment_of_inertia(mass: 15 * units.kg, radius: 8.0 * units.cm)
    )

    wires wires()

    label v_angle(180 * units.deg)
    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 5.0 * units.lb_ft,
        moment_of_inertia: crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 90 * units.deg + (v_angle / 2.0) + lean_angle // lean angle is set to 0 for a flat 12 for obvious reasons
    )

    rod_journal rj1(angle:  0  * units.deg)
    rod_journal rj2(angle: 120 * units.deg)
    rod_journal rj3(angle: 240 * units.deg)
    rod_journal rj4(angle: 240 * units.deg)
    rod_journal rj5(angle: 120 * units.deg)
    rod_journal rj6(angle:  0  * units.deg)
    
    c0
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)
        .add_rod_journal(rj5)
        .add_rod_journal(rj6)

    piston_parameters piston_params(
        mass: piston_mass,
        compression_height: compression_height,
        wrist_pin_position: 0.0,
        displacement: piston_dome
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: deck_height
    )

    bmw_m88_itb itb1()
    bmw_m88_itb itb2()
    bmw_m88_itb itb3()
    bmw_m88_itb itb4()
    bmw_m88_itb itb5()
    bmw_m88_itb itb6()
    bmw_m88_itb itb7()
    bmw_m88_itb itb8()
    bmw_m88_itb itb9()
    bmw_m88_itb itb10()
    bmw_m88_itb itb11()
    bmw_m88_itb itb12()
    // switch to 2 intake systems
    
    label exhaust_radius((3.0 * units.inch)/2)

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(300.0),
        primary_tube_length: 3.0 * units.inch,
        primary_flow_rate: k_carb(200.0),
        velocity_decay: 2.0, //0.5
        collector_cross_section_area: circle_area(exhaust_radius),
        length: 2500 * units.mm,
        volume: 2500 * units.mm * circle_area(exhaust_radius)
    )

    exhaust_system exhaust(es_params, audio_volume: 2.0 * 0.05, impulse_response: ir_lib.default_0) // ir_lib.default_0 and ir_lib.minimal_muffling_02 are also pretty good
   exhaust_system exhaust2(es_params, audio_volume: 2.0 * 0.05, impulse_response: ir_lib.default_0)

    cylinder_bank b0(bank_params, angle: v_angle / 2.0)
    cylinder_bank b1(bank_params, angle: -v_angle / 2.0)
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire1,
            intake: itb1,
            exhaust_system: exhaust,
            primary_length: 6.0 * units.cm,
            sound_attenuation: 1.3
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire2,
            intake: itb2,
            exhaust_system: exhaust,
            primary_length: 4.0 * units.cm,
            sound_attenuation: 0.94
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire3,
            intake: itb3,
            exhaust_system: exhaust,
            primary_length: 2.0 * units.cm,
            sound_attenuation: 0.815
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire4,
            intake: itb4,
            exhaust_system: exhaust,
            primary_length: 0.0 * units.cm,
            sound_attenuation: 0.67
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            ignition_wire: wires.wire5,
            intake: itb5,
            exhaust_system: exhaust,
            primary_length: 1.0 * units.cm,
            sound_attenuation: 0.77
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.3)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj6,
            ignition_wire: wires.wire6,
            intake: itb6,
            exhaust_system: exhaust,
            primary_length: 3.0 * units.cm,
            sound_attenuation: 0.86
        )

b1
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            ignition_wire: wires.wire7,
            intake: itb7,
            exhaust_system: exhaust2,
            primary_length: 6.0 * units.cm,
            sound_attenuation: 1.3
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            ignition_wire: wires.wire8,
            intake: itb8,
            exhaust_system: exhaust2,
            primary_length: 4.0 * units.cm,
            sound_attenuation: 0.94
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            ignition_wire: wires.wire9,
            intake: itb9,
            exhaust_system: exhaust2,
            primary_length: 2.0 * units.cm,
            sound_attenuation: 0.815
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            ignition_wire: wires.wire10,
            intake: itb10,
            exhaust_system: exhaust2,
            primary_length: 0.0 * units.cm,
            sound_attenuation: 0.67
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.1)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            ignition_wire: wires.wire11,
            intake: itb11,
            exhaust_system: exhaust2,
            primary_length: 1.0 * units.cm,
            sound_attenuation: 0.77
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.3)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj6,
            ignition_wire: wires.wire12,
            intake: itb12,
            exhaust_system: exhaust2,
            primary_length: 3.0 * units.cm,
            sound_attenuation: 0.86
        )

    engine
        .add_cylinder_bank(b0)
        .add_cylinder_bank(b1)

    engine.add_crankshaft(c0)

    bmw_camshaft_builder camshaft(
        in_lobe_profile: bmw_m88_lobe_profile_int(),
        ex_lobe_profile: bmw_m88_lobe_profile_exh()
    )

    b0.set_cylinder_head (
        bmw_m88_head(
            intake_camshaft: camshaft.intake_cam_0,
            exhaust_camshaft: camshaft.exhaust_cam_0,
            flip_display: true
        )
    )

    b1.set_cylinder_head (
        bmw_m88_head(
            intake_camshaft: camshaft.intake_cam_1,
            exhaust_camshaft: camshaft.exhaust_cam_1
        )
    )

    function timing_curve(1000 * units.rpm) 
    // what in the kentucky fried fuck was the previous timing curve
    // also, this is the spark advance, it gradually increases with rpm. If you hear popping, lower the advance. I think raising it gives more hp, but not much
    timing_curve
        .add_sample(0000 * units.rpm, 25 * units.deg)
        .add_sample(1000 * units.rpm, 30 * units.deg)
        .add_sample(2000 * units.rpm, 35 * units.deg)
        .add_sample(3000 * units.rpm, 40 * units.deg)
        .add_sample(4000 * units.rpm, 46 * units.deg)
        .add_sample(5000 * units.rpm, 46 * units.deg)
        .add_sample(6000 * units.rpm, 47 * units.deg)
        .add_sample(7000 * units.rpm, 48 * units.deg)
        .add_sample(8000 * units.rpm, 51 * units.deg)
        .add_sample(9000 * units.rpm, 52 * units.deg)

    engine.add_ignition_module(
        bmw_m88_distributor(
            wires: wires,
            timing_curve: timing_curve
        ))
}

private node bmw_m1_procar { // most specs from https://www.ultimatecarpage.com/spec/422/Porsche-917-30.html
    alias output __out:
        vehicle(
            mass: 1020.0 * units.kg,
            drag_coefficient: 0.30, // based on absolutely nothing
            cross_sectional_area: (82.7 * units.inch) * (42.5 * units.inch),
            diff_ratio: 3.5, // I saw this diff ratio in a dream
            tire_radius: 12.0 * units.inch,
            rolling_resistance: 250.0 * units.N,
            stiffness: 75 * units.lb_ft / units.deg,
            damping: 22.5,
            max_flex: 10.0 * units.deg,
            limit_flex: true,
            simulate_flex: true,
            max_brake_force: 9500 * units.N
        );
}

private node zf_5speed { // again, self-tuned to match the sound and shifts from onboard videos
    alias output __out:
        transmission(
            max_clutch_torque: 1000 * units.lb_ft,
            simulate_flex: true,
            clutch_stiffness: 5.0 * units.Nm / units.deg,
            limit_clutch_flex: true,
            max_clutch_flex: 20.0 * units.deg,
            clutch_damping: 0.09 // clutch settings for most "alive" and engaging feeling for shifts (PLEASE use the clutch properly during shifts if you want the best experience)
        )
    .add_gear(3.55)
    .add_gear(2.20)
    .add_gear(1.58)
    .add_gear(1.19)
    .add_gear(1.03)
    .add_gear(0.89);
}


public node main {
    set_engine(bmw_m88_engine())
    set_vehicle(bmw_m1_procar())
    set_transmission(zf_5speed())
}

main()