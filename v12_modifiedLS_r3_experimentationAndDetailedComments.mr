// trying to add 4 more cylinders to make a v12
// based on v8_modifiedLS_r2_experimentation.mr

import "engine_sim.mr"

units units()
constants constants()
impulse_response_library ir_lib()
label cycle(2 * 360 * units.deg)


private node wires {
    output wire1: ignition_wire();
    output wire2: ignition_wire();
    output wire3: ignition_wire();
    output wire4: ignition_wire();
    output wire5: ignition_wire();
    output wire6: ignition_wire();
    output wire7: ignition_wire();
    output wire8: ignition_wire();
    output wire9: ignition_wire();
    output wire10: ignition_wire();
    output wire11: ignition_wire();
    output wire12: ignition_wire();
    // you can add more wires than there are cylinders without breaking the engine
}

private node modifiedLS_v12_head {
    input intake_camshaft;
    input exhaust_camshaft;
    input chamber_volume: 90 * units.cc;
    input intake_runner_volume: 149.6 * units.cc;
    input intake_runner_cross_section_area: 2.2 * units.inch * 2.2 * units.inch;
    input exhaust_runner_volume: 50.0 * units.cc;
    input exhaust_runner_cross_section_area: 1.5 * units.inch * 1.5 * units.inch;

    input flow_attenuation: 1.0;
    input lift_scale: 1.0;
    input flip_display: false;
    alias output __out: head;

    function intake_flow(50 * units.thou)
    intake_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(50 * lift_scale, 1 * flow_attenuation)
        .add_flow_sample(100 * lift_scale, 103 * flow_attenuation)
        .add_flow_sample(150 * lift_scale, 156 * flow_attenuation)
        .add_flow_sample(200 * lift_scale, 214 * flow_attenuation)
        .add_flow_sample(250 * lift_scale, 249 * flow_attenuation)
        .add_flow_sample(300 * lift_scale, 268 * flow_attenuation)
        .add_flow_sample(350 * lift_scale, 280 * flow_attenuation)
        .add_flow_sample(400 * lift_scale, 280 * flow_attenuation)
        .add_flow_sample(450 * lift_scale, 281 * flow_attenuation)

    function exhaust_flow(50 * units.thou)
    exhaust_flow
        .add_flow_sample(0 * lift_scale, 0 * flow_attenuation)
        .add_flow_sample(50 * lift_scale, 1 * flow_attenuation)
        .add_flow_sample(100 * lift_scale, 72 * flow_attenuation)
        .add_flow_sample(150 * lift_scale, 113 * flow_attenuation)
        .add_flow_sample(200 * lift_scale, 160 * flow_attenuation)
        .add_flow_sample(250 * lift_scale, 196 * flow_attenuation)
        .add_flow_sample(300 * lift_scale, 222 * flow_attenuation)
        .add_flow_sample(350 * lift_scale, 235 * flow_attenuation)
        .add_flow_sample(400 * lift_scale, 245 * flow_attenuation)
        .add_flow_sample(450 * lift_scale, 246 * flow_attenuation)

    generic_cylinder_head head(
        chamber_volume: chamber_volume,
        intake_runner_volume: intake_runner_volume,
        intake_runner_cross_section_area: intake_runner_cross_section_area,
        exhaust_runner_volume: exhaust_runner_volume,
        exhaust_runner_cross_section_area: exhaust_runner_cross_section_area,

        intake_port_flow: intake_flow,
        exhaust_port_flow: exhaust_flow,
        valvetrain: standard_valvetrain(
            intake_camshaft: intake_camshaft,
            exhaust_camshaft: exhaust_camshaft
        ),
        flip_display: flip_display
    )
}

private node modifiedLS_v12_camshaft {
    input lobe_profile;
    input intake_lobe_profile: lobe_profile;
    input exhaust_lobe_profile: lobe_profile;
    input lobe_separation: 114 * units.deg;
    input intake_lobe_center: lobe_separation;
    input exhaust_lobe_center: lobe_separation;  
    input advance: 10 * units.deg;
    input base_radius: 0.5 * units.inch;

    output intake_cam_0: _intake_cam_0;
    output exhaust_cam_0: _exhaust_cam_0;

    output intake_cam_1: _intake_cam_1;
    output exhaust_cam_1: _exhaust_cam_1;

    camshaft_parameters params (
        advance: advance,
        base_radius: base_radius
    )

    camshaft _intake_cam_0(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_0(params, lobe_profile: exhaust_lobe_profile)
    camshaft _intake_cam_1(params, lobe_profile: intake_lobe_profile)
    camshaft _exhaust_cam_1(params, lobe_profile: exhaust_lobe_profile)

    label rot(90 * units.deg)
    label rot360(360 * units.deg)
    
    // tg = timed good
    // st = spark plug timing needs work
    // nw = needs work
    _exhaust_cam_0
        .add_lobe(rot360 - exhaust_lobe_center + (0*120) * units.deg)      // 1  tg
        .add_lobe(rot360 - exhaust_lobe_center + (4*120) * units.deg)      // 3  tg
        .add_lobe(rot360 - exhaust_lobe_center + (2*120) * units.deg)      // 5  tg
        .add_lobe(rot360 - exhaust_lobe_center + (5*120) + 90 * units.deg) // 7  tg
        .add_lobe(rot360 - exhaust_lobe_center + (2*120) + 45 * units.deg) // 9  tg
        .add_lobe(rot360 - exhaust_lobe_center + (7*120) + 90 * units.deg) // 11 st
    _intake_cam_0
        .add_lobe(rot360 + intake_lobe_center + (0*120) * units.deg)       // 1  tg
        .add_lobe(rot360 + intake_lobe_center + (4*120) * units.deg)       // 3  tg
        .add_lobe(rot360 + intake_lobe_center + (2*120) * units.deg)       // 5  tg
        .add_lobe(rot360 + intake_lobe_center + (5*120) + 90 * units.deg)  // 7  tg
        .add_lobe(rot360 + intake_lobe_center + (2*120) + 45 * units.deg)  // 9  tg
        .add_lobe(rot360 + intake_lobe_center + (7*120) + 90 * units.deg)  // 11 st

    _exhaust_cam_1
        .add_lobe(rot360 - exhaust_lobe_center + (2*120) * units.deg)      // 2  st
        .add_lobe(rot360 - exhaust_lobe_center + (6*120) * units.deg)      // 4  st
        .add_lobe(rot360 - exhaust_lobe_center + (1*120) * units.deg)      // 6  st
        .add_lobe(rot360 - exhaust_lobe_center + (2*120) + 90 * units.deg) // 8  tg
        .add_lobe(rot360 - exhaust_lobe_center + (8*120) + 90 * units.deg) // 10 st
        .add_lobe(rot360 - exhaust_lobe_center + (5*120) + 90 * units.deg) // 12 st
    _intake_cam_1
        .add_lobe(rot360 + intake_lobe_center + (2*120) * units.deg)       // 2  st
        .add_lobe(rot360 + intake_lobe_center + (6*120) * units.deg)       // 4  st
        .add_lobe(rot360 + intake_lobe_center + (1*120) * units.deg)       // 6  st
        .add_lobe(rot360 + intake_lobe_center + (2*120) + 90 * units.deg)  // 8  tg
        .add_lobe(rot360 + intake_lobe_center + (8*120) + 90 * units.deg)  // 10 st
        .add_lobe(rot360 + intake_lobe_center + (5*120) + 90 * units.deg)  // 12 st
}

private node turbulence_to_flame_speed_ratio {
    alias output __out:
        function(5.0)
            .add_sample(0.0, 3.0)
            .add_sample(5.0, 1.5 * 5.0)
            .add_sample(10.0, 1.75 * 10.0)
            .add_sample(15.0, 2.0 * 15.0)
            .add_sample(20.0, 2.0 * 20.0)
            .add_sample(25.0, 2.0 * 25.0)
            .add_sample(30.0, 2.0 * 30.0)
            .add_sample(35.0, 2.0 * 35.0)
            .add_sample(40.0, 2.0 * 40.0)
            .add_sample(45.0, 2.0 * 45.0);
}

public node ls_v8_replica {
    alias output __out: engine;
    
    engine engine(
        name: "LS but v12",

        starter_torque: 400 * units.lb_ft,
        starter_speed: 400 * units.rpm,

        redline: 7500 * units.rpm,
        // also change at rev_limit

        throttle_gamma: 2.0,
        fuel: fuel(
            //max_turbulence_effect: 10.0,
            //max_dilution_effect: 20.0,
            //burning_efficiency_randomness: 0.5,
            max_burning_efficiency: 1.0,
            turbulence_to_flame_speed_ratio: turbulence_to_flame_speed_ratio()
        ),

        hf_gain: 0.01,
        noise: 1.0,
        jitter: 0.4,
        simulation_frequency: 9200
        // change this so that rt/dt is around 70
    )

    wires wires()

    label stroke(3.95 * units.inch)
    label bore(4.20* units.inch)
    // change displacement of engine

    label rod_length(200 * units.mm) // og = 160mm
    label rod_mass(50 * units.g)
    // increasing rod length increases hp
    // rod mass has minimal impact

    label compression_height(1.0 * units.inch)
    // minimal impact to hp

    label crank_mass(60 * units.lb)
    // minimal impact to hp

    label flywheel_mass(10 * units.lb)
    label flywheel_radius(8 * units.inch)
    // todo: explanation here of how this impacts hp

    // probably shouldn't mess with this
    label crank_moment(
        1.5 * disk_moment_of_inertia(mass: crank_mass, radius: stroke)
    )
    label flywheel_moment(
        disk_moment_of_inertia(mass: flywheel_mass, radius: flywheel_radius)
    )
    label other_moment( // Moment from cams, pulleys, etc [estimated]
        disk_moment_of_inertia(mass: 1 * units.kg, radius: 1.0 * units.cm)
        // by decreasing mass, you lower the amount of angular momentum which decreases moment of intertia
        // by decreasing radius, you also lower the amount of angular momentum which decreases moment of intertia
        // Angular momentum = mass * velocity * radius
        // Moment of intertia = angular momentum / angular velocity
        // Angular velocity = change in angular rotation / change in time
    )

    label v_angle(90 * units.deg)
    crankshaft c0(
        throw: stroke / 2,
        flywheel_mass: flywheel_mass,
        mass: crank_mass,
        friction_torque: 20.0 * units.lb_ft,
        moment_of_inertia:
            crank_moment + flywheel_moment + other_moment,
        position_x: 0.0,
        position_y: 0.0,
        tdc: 90 * units.deg - (v_angle / 2.0)
    )

    rod_journal rj0(angle: 0   * units.deg)
    rod_journal rj1(angle: 120 * units.deg)
    rod_journal rj2(angle: 240 * units.deg)
    rod_journal rj3(angle: 240 * units.deg)
    rod_journal rj4(angle: 120 * units.deg)
    rod_journal rj5(angle: 0   * units.deg)

    c0
        .add_rod_journal(rj0)
        .add_rod_journal(rj1)
        .add_rod_journal(rj2)
        .add_rod_journal(rj3)
        .add_rod_journal(rj4)
        .add_rod_journal(rj5)

    piston_parameters piston_params(
         // 414 - piston mass, 152 - pin weight
        mass: (100) * units.g,
        compression_height: compression_height,
        wrist_pin_position: 0.0,
        displacement: 0.0
    )

    connecting_rod_parameters cr_params(
        mass: rod_mass,
        moment_of_inertia: rod_moment_of_inertia(
            mass: rod_mass,
            length: rod_length
        ),
        center_of_mass: 0.0,
        length: rod_length
    )


// very VERY helpful parameters here
// can help for rough idle, or more power 
// does make the engine a little more hard to start though lol
    intake intake(
        plenum_volume: 1.285 * units.L,
        plenum_cross_section_area: 10.0 * units.cm2,
        // lowering these leads to higher hp (find a balance though, its a bit funky)
        // the volume is the main one that relates to hp gain
        // cross section is more minimal in terms of impact

        intake_flow_rate: k_carb(2400.0),
        runner_flow_rate: k_carb(800.0),
        // raising these leads to higher hp

        runner_length: 12.0 * units.inch,
        // find the balance 
        // impacts how well the engine runs)
        
        idle_flow_rate: k_carb(0.0),
        idle_throttle_plate_position: 0.993,
        // adjust idle speed (lower = higher idle)
        velocity_decay: 0.5
    )

    exhaust_system_parameters es_params(
        outlet_flow_rate: k_carb(2000.0),
        primary_tube_length: 29.0 * units.inch,
        primary_flow_rate: k_carb(500.0),
        velocity_decay: 1.0
    )
    // impacts how engine sounds (and prob performance)

    exhaust_system exhaust0(
        es_params,
        audio_volume: 8.0,
        length: 100 * units.inch,
        impulse_response: ir_lib.default_0

    )
    exhaust_system exhaust1(
        es_params,
        audio_volume: 1.0,
        length: 100 * units.inch,
        impulse_response: ir_lib.default_0
    )

    cylinder_bank_parameters bank_params(
        bore: bore,
        deck_height: stroke / 2 + rod_length + compression_height
    )

    label spacing(0 * units.inch)

    cylinder_bank b0(bank_params, angle: -v_angle / 2.0)
    cylinder_bank b1(bank_params, angle: v_angle / 2.0)

    // bank 1
    b0
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.0)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire1,
            sound_attenuation: 1.0,
            primary_length: 3 * spacing + 2 * units.cm
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.0)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire3,
            sound_attenuation: 1.0,
            primary_length: 2 * spacing + 1 * units.cm
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.0)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire5,
            sound_attenuation: 1.0,
            primary_length: 1 * spacing + 3 * units.cm
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.0)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire7,
            sound_attenuation: 1.0,
            primary_length: 0 * spacing + 5 * units.cm
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.0)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire9,
            sound_attenuation: 1.0,
            primary_length: 0 * spacing + 5 * units.cm
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.0)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            intake: intake,
            exhaust_system: exhaust0,
            ignition_wire: wires.wire11,
            sound_attenuation: 1.0,
            primary_length: 0 * spacing + 5 * units.cm
        )
        .set_cylinder_head(
            modifiedLS_v12_head(
                intake_camshaft: camshaft.intake_cam_0,
                exhaust_camshaft: camshaft.exhaust_cam_0,
                flip_display: false,
                flow_attenuation: 1.0)
        )
        
    // bank 2
    b1
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.0)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj0,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire2,
            sound_attenuation: 1.0,
            primary_length: 3 * spacing + 1 * units.cm
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.0)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj1,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire4,
            sound_attenuation: 1.0,
            primary_length: 2 * spacing + 5 * units.cm
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.0)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj2,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire6,
            sound_attenuation: 1.0,
            primary_length: 1 * spacing + 7 * units.cm
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.0)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj3,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire8,
            sound_attenuation: 1.0,
            primary_length: 0 * spacing + 0 * units.cm
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.0)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj4,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire10,
            sound_attenuation: 1.0,
            primary_length: 0 * spacing + 0 * units.cm
        )
        .add_cylinder(
            piston: piston(piston_params, blowby: k_28inH2O(0.0)),
            connecting_rod: connecting_rod(cr_params),
            rod_journal: rj5,
            intake: intake,
            exhaust_system: exhaust1,
            ignition_wire: wires.wire12,
            sound_attenuation: 1.0,
            primary_length: 0 * spacing + 0 * units.cm
        )
        .set_cylinder_head(
            modifiedLS_v12_head(
                intake_camshaft: camshaft.intake_cam_1,
                exhaust_camshaft: camshaft.exhaust_cam_1,
                flow_attenuation: 1.0,
                flip_display: true)
        )

    engine
        .add_cylinder_bank(b0)
        .add_cylinder_bank(b1)

    engine.add_crankshaft(c0)

    harmonic_cam_lobe intake_lobe(
        duration_at_50_thou: 234 * units.deg,
        gamma: 1.1,
        lift: 551 * units.thou,
        steps: 256
    )

    harmonic_cam_lobe exhaust_lobe(
        duration_at_50_thou: 235 * units.deg,
        gamma: 1.1,
        lift: 551 * units.thou,
        steps: 256
    )

    modifiedLS_v12_camshaft camshaft(
        lobe_profile: "N/A",

        intake_lobe_profile: intake_lobe,
        exhaust_lobe_profile: exhaust_lobe,
        intake_lobe_center: 116 * units.deg,
        exhaust_lobe_center: 116 * units.deg,
        base_radius: 1.0 * units.inch
    )


    function timing_curve(1000 * units.rpm)
    timing_curve
        .add_sample(0000 * units.rpm, 12 * units.deg)
        .add_sample(1000 * units.rpm, 12 * units.deg)
        .add_sample(2000 * units.rpm, 20 * units.deg)
        .add_sample(3000 * units.rpm, 30 * units.deg)
        .add_sample(4000 * units.rpm, 40 * units.deg)
        .add_sample(5000 * units.rpm, 40 * units.deg)
        .add_sample(6000 * units.rpm, 40 * units.deg)
        .add_sample(7000 * units.rpm, 40 * units.deg)
        .add_sample(8000 * units.rpm, 40 * units.deg)

    ignition_module ignition_module(
        timing_curve: timing_curve,
        rev_limit: 7600 * units.rpm,
        limiter_duration: 0.07)

    ignition_module
        // firing order: 1, 5, 3, 6, 2, 4
        // bank 1
            .connect_wire(wires.wire1,  0 * 120 * units.deg) // cylinder 1
            .connect_wire(wires.wire3,  4 * 120 * units.deg) // cylinder 2
            .connect_wire(wires.wire5,  2 * 120 * units.deg) // cylinder 3
            .connect_wire(wires.wire7,  5 * 120 * units.deg) // cylinder 4
            .connect_wire(wires.wire9,  1 * 120 * units.deg) // cylinder 5
            .connect_wire(wires.wire11, 3 * 120 * units.deg) // cylinder 6

        // firing order: 12, 8, 10, 7, 11, 9
        // bank 2
            .connect_wire(wires.wire2,  (3*120) + 90 * units.deg) // cylinder 7
            .connect_wire(wires.wire4,  (1*120) + 90 * units.deg) // cylinder 8
            .connect_wire(wires.wire6,  (5*120) + 90 * units.deg) // cylinder 9
            .connect_wire(wires.wire8,  (2*120) + 90 * units.deg) // cylinder 10
            .connect_wire(wires.wire10, (4*120) + 90 * units.deg) // cylinder 11
            .connect_wire(wires.wire12, (0*120) + 90 * units.deg) // cylinder 12

    engine.add_ignition_module(ignition_module)
/* 
    TODO: firing order to be calculated to something more optimal
*/
}

private node corvette {
    alias output __out:
        vehicle(
            mass: 1614 * units.kg,
            drag_coefficient: 0.3,
            cross_sectional_area: (72 * units.inch) * (50 * units.inch),
            diff_ratio: 3.42,
            tire_radius: 16 * units.inch,
            rolling_resistance: 200 * units.N,
            stiffness: 50 * units.lb_ft / units.deg,
            damping: 15.0,
            max_flex: 5 * units.deg,
            limit_flex: true,
            simulate_flex: true,
            max_brake_force: 10000 * units.N
        );
}

private node corvette_transmission {
    alias output __out:
        transmission(
            max_clutch_torque: 600 * units.lb_ft,
            max_clutch_flex: 5 * units.deg,
            limit_clutch_flex: true,
            clutch_stiffness: 50 * units.lb_ft / units.deg,
            clutch_damping: 2.0,
            simulate_flex: true
        )
        .add_gear(2.97)
        .add_gear(2.07)
        .add_gear(1.43)
        .add_gear(1.20)
        .add_gear(1.00)
        .add_gear(0.90);
}

public node main {
    run(
        engine: ls_v8_replica(),
        vehicle: corvette(),
        transmission: corvette_transmission()
    )
}

main()